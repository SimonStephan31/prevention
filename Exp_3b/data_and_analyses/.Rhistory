# packages
library(ez)
library(ggplot2)
library(plyr)
library(pastecs)
library(ez)
library(data.table)
library(overlapping) # to compute the
library(tidyr)
library(showtext)
#install.packages("expss")
library(expss)
font_add_google("Poppins", "Poppins")
font_add_google("Roboto Mono", "Roboto Mono")
showtext_auto()
# read data
tdata <- read.table("Exp3b_data.txt", header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
# Demographics
#demogr_data <- tdata[!duplicated(tdata$sID), ]
mean(tdata$age)
sd(tdata$age)
min(tdata$age)
max(tdata$age)
table(tdata$gender)
# declare factors and their levels
tdata$test_case <- factor(tdata$test_case, levels = c("one_too_late", "both_on_time"), labels = c("contiguous", "delayed"))
# recode responses so that 1 = first preventer, 2 = second second preventer, 3 = both
tdata$main_dv_rec <- c(1:length(tdata$run_id))
tdata$main_dv_rec[tdata$first_preventer =="upper" & tdata$main_dv == 1] <- 1
tdata$main_dv_rec[tdata$first_preventer =="upper" & tdata$main_dv == 2] <- 2
tdata$main_dv_rec[tdata$first_preventer =="upper" & tdata$main_dv == 3] <- 3
tdata$main_dv_rec[tdata$first_preventer =="lower" & tdata$main_dv == 1] <- 2
tdata$main_dv_rec[tdata$first_preventer =="lower" & tdata$main_dv == 2] <- 1
tdata$main_dv_rec[tdata$first_preventer =="lower" & tdata$main_dv == 3] <- 3
tdata$selection_verbal <- c(1:length(tdata$run_id))
tdata$selection_verbal[tdata$main_dv_rec == 1] <- "first"
tdata$selection_verbal[tdata$main_dv_rec == 2] <- "second"
tdata$selection_verbal[tdata$main_dv_rec == 3] <- "both"
# create a summary dataset that also contains the percentages
library(dplyr)
plotdata <- tdata %>%
group_by(test_case, selection_verbal) %>%
summarize(n = n()) %>%
mutate(pct = n/sum(n),
lbl = scales::percent(pct))
plotdata
# append CI of the proportions
cases <- plotdata$n
N <- sum(plotdata$n)/2
t <- prop.test(cases[1],N, p = 1/3, correct=FALSE) # get CI for Invariance government
CI_both_min_1 <- t$conf.int[1]
CI_both_max_1 <- t$conf.int[2]
t
t <- prop.test(cases[2],N, p = 1/3, correct=FALSE) # get CI for Invariance government
CI_first_min_1 <- t$conf.int[1]
CI_first_max_1 <- t$conf.int[2]
t
t <- prop.test(cases[3],N, p = 1/3, correct=FALSE) # get CI for Invariance government
CI_both_min_2 <- t$conf.int[1]
CI_both_max_2 <- t$conf.int[2]
t
t <- prop.test(cases[4],N, p = 1/3, correct=FALSE) # get CI for Invariance government
CI_first_min_2 <- t$conf.int[1]
CI_first_max_2 <- t$conf.int[2]
t
t <- prop.test(cases[5],N, p = 1/3, correct=FALSE) # get CI for Invariance government
CI_second_min_2 <- t$conf.int[1]
CI_second_max_2 <- t$conf.int[2]
t
CI_low <- c(CI_both_min_1, CI_first_min_1, CI_both_min_2, CI_first_min_2, CI_second_min_2)
CI_up <- c(CI_both_max_1, CI_first_max_1, CI_both_max_2, CI_first_max_2, CI_second_max_2)
plotdata$CI_low <- CI_low
plotdata$CI_up <- CI_up
prop.test(c(cases[2], cases[4]), c(N,N), p = NULL, alternative = "two.sided",
correct = TRUE)
prop.test(c(cases[1], cases[3]), c(N,N), p = NULL, alternative = "two.sided",
correct = TRUE)
library(scales)
theme_set(theme_light(base_size = 12, base_family = "Poppins"))
myTheme <- theme(plot.title = element_text(face="bold", size = 22),
axis.title.x = element_text(size = 16, face = "bold"),
axis.title.y = element_text(size = 16, face = "bold"),
axis.text.x = element_text(size = 14, angle = 0),
axis.text.y = element_text(size = 12, angle = 0),
legend.text = element_text(size = 16),
legend.title = element_text(face = "bold", size = 16),
strip.text.x = element_text(size = 16),
#panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(colour = "black"),
axis.line.y = element_line(colour = "black"),
axis.text = element_text(colour ="black"),
axis.ticks = element_line(colour ="black"))
g<- ggplot(plotdata,
aes(x = test_case, y = pct,
fill = factor(selection_verbal,
levels = c("first", "second", "both"),
labels = c("first", "second", "both")))) +
scale_y_continuous(limits = seq(0, 2),
breaks = seq(0, 1, .25),
expand = c(0,0),
label = percent) +
coord_cartesian(ylim = c(0, 1))+
geom_bar(stat = "identity",
position = "dodge") +
scale_y_continuous(breaks = seq(0, 1, .2),
label = percent) +
geom_text(aes(label = lbl),
size = 5,
position = position_dodge(width = .9),
vjust = -2.7) +
geom_errorbar(aes(ymin=CI_low, ymax=CI_up), width=.0,
position=position_dodge(.9)) +
#geom_hline(yintercept=1/3, linetype="dashed", color = "red")+
scale_fill_brewer(palette = "Set2") +
labs(y = "Percent",
fill = "Singular \nPreventer",
x = "Preventive mechanism")+
myTheme
g
ggsave("Exp_moon_selections.pdf",width=7.5,height=4)
#ggsave("Exp3b_selections.svg",width=7.5,height=4)
rmarkdown::render_site()
